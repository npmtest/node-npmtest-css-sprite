{"/home/travis/build/npmtest/node-npmtest-css-sprite/test.js":"/* istanbul instrument in package npmtest_css_sprite */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-css-sprite/lib.npmtest_css_sprite.js":"/* istanbul instrument in package npmtest_css_sprite */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_css_sprite = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_css_sprite = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-css-sprite/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-css-sprite && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_css_sprite */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_css_sprite\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_css_sprite.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_css_sprite.rollup.js'] =\n            local.assetsDict['/assets.npmtest_css_sprite.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_css_sprite.__dirname + '/lib.npmtest_css_sprite.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-css-sprite/node_modules/css-sprite/index.js":"'use strict';\n\nvar sprite = require('./lib/css-sprite');\nvar through2 = require('through2');\nvar vfs = require('vinyl-fs');\nvar fs = require('graceful-fs');\nvar mkdirp = require('mkdirp');\nvar path = require('path');\nvar replaceExtension = require('./lib/replace-extension');\nvar _ = require('lodash');\nvar noop = function () {};\n\nvar writeFile = function (file, enc, cb) {\n  var stream = this;\n  mkdirp(file.base, function () {\n    fs.writeFile(file.path, file.contents, function () {\n      stream.push(file);\n      cb();\n    });\n  });\n};\n\nvar defaults = {\n  src: null,\n  out: '',\n  name: 'sprite',\n  style: null,\n  format: 'png',\n  cssPath: '../images',\n  processor: 'css',\n  template: null,\n  orientation: 'vertical',\n  retina: false,\n  background: '#FFFFFF',\n  margin: 4,\n  opacity: 0,\n  sort: true\n};\n\nmodule.exports = {\n  /*\n   *  Creates sprite and css file\n   */\n  create: function (o, cb) {\n    if (!o.src) {\n      throw new Error('glob missing');\n    }\n    if (!o.out) {\n      throw new Error('output dir missing');\n    }\n\n    var opts = _.extend({}, defaults, o);\n    if (opts.style && path.basename(opts.style).indexOf('.') === -1) {\n      opts.style = path.join(opts.style, replaceExtension(opts.name, '.' + opts.processor));\n    }\n    vfs.src(opts.src)\n      .pipe(sprite(opts))\n      .pipe(through2.obj(writeFile))\n      .on('data', noop)\n      .on('end', function () {\n        if (_.isFunction(cb)) {\n          cb();\n        }\n      });\n  },\n  /*\n   *  Takes a vinyl-fs Readable/Writable stream of images\n   *  returns a Readable/Writable stream of vinyl files of the sprite and css file\n   */\n  stream: function (o) {\n    var opts = _.extend({}, defaults, o);\n    return sprite(opts);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-css-sprite/node_modules/css-sprite/lib/css-sprite.js":"'use strict';\n\nvar async = require('async');\nvar crypto = require('crypto');\nvar through2 = require('through2');\nvar lodash = require('lodash');\nvar path = require('path');\nvar json2css = require('json2css');\nvar File = require('vinyl');\nvar imageinfo = require('imageinfo');\nvar layout = require('layout');\nvar replaceExtension = require('./replace-extension');\nvar lwip = require('lwip');\nvar Color = require('color');\nvar url = require('url');\n\n// json2css template\njson2css.addTemplate('sprite', require(path.join(__dirname, 'templates/sprite.js')));\n\nmodule.exports = function (opt) {\n  opt = lodash.extend({}, {name: 'sprite', format: 'png', margin: 4, processor: 'css', cssPath: '../images', orientation: 'vertical', sort: true, interpolation: 'grid'}, opt);\n  opt.styleExtension = (opt.processor === 'stylus') ? 'styl' : opt.processor;\n  var layoutOrientation = opt.orientation === 'vertical' ? 'top-down' : opt.orientation === 'horizontal' ? 'left-right' : 'binary-tree';\n  var layer = layout(layoutOrientation, {'sort': opt.sort});\n\n  if (opt.opacity === 0 && opt.format === 'jpg') {\n    opt.opacity = 1;\n  }\n\n  var color = new Color(opt.background);\n  opt.color = color.rgbArray();\n  opt.color.push(opt.opacity);\n\n  function queue (file, img) {\n    var spriteName = replaceExtension(file.relative, '').replace(/\\/|\\\\|\\ /g, '-');\n    layer.addItem({\n      height: img.height() + 2 * opt.margin,\n      width: img.width() + 2 * opt.margin,\n      meta: {\n        name: spriteName,\n        img: img,\n        image: opt.cssPath + '/' + opt.name\n      }\n    });\n  }\n\n  function queueImages (file, enc, cb) {\n    if (file.isNull()) {\n      cb();\n      return; // ignore\n    }\n\n    if (file.isStream()) {\n      cb(new Error('Streaming not supported'));\n      return; // ignore\n    }\n    if (imageinfo(file.contents)) {\n      lwip.open(file.contents, imageinfo(file.contents).format.toLowerCase(), function(err, img) {\n        if (!err) {\n          queue(file, img);\n          cb();\n        }\n        else {\n          console.log('Ignoring ' + file.relative + ' -> ' + err.toString());\n          cb();\n        }\n      });\n    }\n    else {\n      console.log('Ignoring ' + file.relative + ' -> no image info');\n      cb();\n    }\n  }\n\n  function createCanvas (layerInfo, cb) {\n    lwip.create(layerInfo.width, layerInfo.height, opt.color, function (err, image) {\n      async.eachSeries(layerInfo.items, function (sprite, callback) {\n        image.paste(sprite.x + opt.margin, sprite.y + opt.margin, sprite.meta.img, callback);\n      }, function () {\n        cb(image);\n      });\n    });\n  }\n\n  function createNonRetinaCanvas (retinaCanvas, cb) {\n    var width = Math.floor(retinaCanvas.width() / 2);\n    var height = Math.floor(retinaCanvas.height() / 2);\n    retinaCanvas.clone(function(err, clone){\n      // tell lwip to use the 'grid' interpolation method when resizing - it makes the resized image look much better\n      clone.resize(width, height, opt.interpolation, function (err, image) {\n        cb(image);\n      });\n    });\n  }\n\n  function createStyle (layerInfo, sprite, retinaSprite) {\n    var sprites = [];\n    lodash.forEach(layerInfo.items, function (sprite) {\n      sprites.push({\n        'name': sprite.meta.name,\n        'x': sprite.x + opt.margin,\n        'y': sprite.y + opt.margin,\n        'width': sprite.width - opt.margin * 2,\n        'height': sprite.height - opt.margin * 2,\n        'total_width': layerInfo.width,\n        'total_height': layerInfo.height,\n        'image': sprite.meta.image\n      });\n    });\n\n    var cachebuster = '';\n    if (opt.cachebuster === 'random') {\n      cachebuster = '?' + crypto.randomBytes(20).toString('hex');\n    }\n\n    if (retinaSprite) {\n      sprites.unshift({\n        name: retinaSprite.relative,\n        type: 'retina',\n        image: (!opt.base64) ? url.resolve(opt.cssPath.replace(/\\\\/g, '/'), retinaSprite.relative) + cachebuster : 'data:' + imageinfo(retinaSprite.buffer).mimeType + ';base64,' + retinaSprite.buffer.toString('base64'),\n        total_width: sprite.canvas.width(),\n        total_height: sprite.canvas.height()\n      });\n\n      lodash.forEach(sprites, function (sprite, i) {\n        sprites[i].x = Math.floor(sprite.x / 2);\n        sprites[i].y = Math.floor(sprite.y / 2);\n        sprites[i].width = Math.floor(sprite.width / 2);\n        sprites[i].height = Math.floor(sprite.height / 2);\n      });\n    }\n\n    sprites.unshift({\n      name: sprite.relative,\n      type: 'sprite',\n      image: (!opt.base64) ? url.resolve(opt.cssPath.replace(/\\\\/g, '/'), sprite.relative) + cachebuster : 'data:' + imageinfo(sprite.buffer).mimeType + ';base64,' + sprite.buffer.toString('base64'),\n      total_width: sprite.canvas.width,\n      total_height: sprite.canvas.height\n    });\n\n    return json2css(sprites, {'format': 'sprite', formatOpts: {'cssClass': opt.prefix, 'processor': opt.processor, 'template': opt.template}});\n  }\n\n  function createSprite (cb) {\n    var _this = this;\n    var layerInfo = layer.export();\n    var sprite, nonRetinaSprite, style;\n    if (layerInfo.items.length === 0) {\n      cb();\n      return; // ignore\n    }\n\n    async.waterfall([\n      function (callback) {\n        createCanvas(layerInfo, function (canvas) {\n          sprite = {\n            base: opt.out,\n            relative: opt.name + '.' + opt.format,\n            path: path.join(opt.out, opt.name + '.' + opt.format),\n            canvas: canvas\n          };\n          callback(null, sprite);\n        });\n      },\n      function (sprite, callback) {\n        if (opt.retina) {\n          sprite.path = replaceExtension(sprite.path, '') + '@2x.' + opt.format;\n          sprite.relative = replaceExtension(sprite.relative, '') + '@2x.' + opt.format;\n          createNonRetinaCanvas(sprite.canvas, function (canvas) {\n            nonRetinaSprite = {\n              base: opt.out,\n              relative: opt.name + '.' + opt.format,\n              path: path.join(opt.out, opt.name + '.' + opt.format),\n              canvas: canvas\n            };\n            callback(null, sprite, nonRetinaSprite);\n          });\n        }\n        else {\n          callback(null, sprite, null);\n        }\n      },\n      function (sprite, nonRetinaSprite, callback) {\n        if (nonRetinaSprite) {\n          nonRetinaSprite.canvas.toBuffer(opt.format, {}, function (err, buf) {\n            nonRetinaSprite.buffer = buf;\n            callback(null, sprite, nonRetinaSprite);\n          });\n        }\n        else {\n          callback(null, sprite, nonRetinaSprite);\n        }\n      },\n      function (sprite, nonRetinaSprite, callback) {\n        sprite.canvas.toBuffer(opt.format, {}, function (err, buf) {\n          sprite.buffer = buf;\n          callback(null, sprite, nonRetinaSprite);\n        });\n      },\n      function (sprite, nonRetinaSprite, callback) {\n        if (!opt.base64) {\n          if (nonRetinaSprite) {\n            _this.push(new File({\n              base: nonRetinaSprite.base,\n              path: nonRetinaSprite.path,\n              contents: nonRetinaSprite.buffer\n            }));\n          }\n          _this.push(new File({\n            base: sprite.base,\n            path: sprite.path,\n            contents: sprite.buffer\n          }));\n        }\n        callback(null, sprite, nonRetinaSprite);\n      },\n      function (sprite, nonRetinaSprite, callback) {\n        if (opt.style || opt.base64) {\n          style = opt.retina ? createStyle(layerInfo, nonRetinaSprite, sprite) : createStyle(layerInfo, sprite);\n          _this.push(new File({\n            base: !opt.base64 ? path.dirname(opt.style) : opt.out,\n            path: opt.style ? opt.style : path.join(opt.out, replaceExtension(opt.name, '.' + opt.styleExtension)),\n            contents: new Buffer(style)\n          }));\n        }\n        callback(null);\n      }\n    ], function () {\n      cb();\n    });\n  }\n\n  return through2.obj(queueImages, createSprite);\n};\n","/home/travis/build/npmtest/node-npmtest-css-sprite/node_modules/css-sprite/lib/replace-extension.js":"'use strict';\nvar path = require('path');\n\nmodule.exports = function (npath, ext) {\n  var nFileName = path.basename(npath, path.extname(npath)) + ext;\n  return path.join(path.dirname(npath), nFileName);\n};\n","/home/travis/build/npmtest/node-npmtest-css-sprite/node_modules/css-sprite/bin/cli.js":"#!/usr/bin/env node\n'use strict';\n\nvar sprite = require('../index');\n// var gaze = require('gaze');\nvar fs = require('vinyl-fs');\nvar opts = require('nomnom')\n  .option('out', {\n    position: 0,\n    required: true,\n    metavar: 'DIR',\n    default: process.cwd(),\n    help: 'path of directory to write sprite file to'\n  })\n  .option('src', {\n    position: 1,\n    required: true,\n    list: true,\n    metavar: 'GLOB',\n    help: 'glob strings to find source images to put into the sprite'\n  })\n  .option('base64', {\n    abbr: 'b',\n    flag: true,\n    help: 'create css with base64 encoded sprite (css file will be written to <out>)'\n  })\n  .option('cssPath', {\n    abbr: 'c',\n    full: 'css-image-path',\n    default: '../images',\n    help: 'http path to images on the web server (relative to css path or absolute path)'\n  })\n  .option('format', {\n    abbr: 'f',\n    choices: ['png', 'jpg'],\n    default: 'png',\n    help: 'output format of the sprite (png or jpg)'\n  })\n  .option('name', {\n    abbr: 'n',\n    default: 'sprite',\n    help: 'name of sprite file without file extension '\n  })\n  .option('processor', {\n    abbr: 'p',\n    choices: ['css', 'less', 'sass', 'scss', 'stylus'],\n    default: 'css',\n    help: 'output format of the css. one of css, less, sass, scss or stylus'\n  })\n  .option('template', {\n    abbr: 't',\n    help: 'output template file, overrides processor option'\n  })\n  .option('retina', {\n    abbr: 'r',\n    flag: true,\n    help: 'generate both retina and standard sprites. src images have to be in retina resolution'\n  })\n  .option('style', {\n    abbr: 's',\n    help: 'file to write css to, if omitted no css is written'\n  })\n  .option('watch', {\n    abbr: 'w',\n    flag: true,\n    help: 'continuously create sprite'\n  })\n  .option('background', {\n    default: '#FFFFFF',\n    help: 'background color of the sprite in hex'\n  })\n  .option('cachebuster', {\n    choices: ['random'],\n    default: false,\n    help: 'appends a \"cache buster\" to the background image in the form \"?<...>\" (random)'\n  })\n  .option('margin', {\n    default: 4,\n    help: 'margin in px between tiles'\n  })\n  .option('interpolation', {\n    choices: ['nearest-neighbor', 'moving-average', 'linear', 'grid', 'cubic', 'lanczos'],\n    dedault: 'grid',\n    help: 'Interpolation algorithm used when scaling retina images (nearest-neighbor|moving-average|linear|grid|cubic|lanczos)'\n  })\n  .option('opacity', {\n    default: 0,\n    help: 'background opacity of the sprite. defaults to 0 when png or 100 when jpg'\n  })\n  .option('orientation', {\n    choices: ['vertical', 'horizontal', 'binary-tree'],\n    default: 'vertical',\n    help: 'orientation of the sprite image (vertical|horizontal|binary-tree)'\n  })\n  .option('prefix', {\n    help: 'prefix for the class name used in css (without .)'\n  })\n  .option('no-sort', {\n    flag: true,\n    help: 'disable sorting of layout'\n  })\n  .script('css-sprite')\n  .parse();\n\nif (opts.watch) {\n  if (opts['no-sort']) {\n    opts.sort = false;\n  }\n  console.log('Watching for file changes ...');\n  fs.watch(opts.src, function () {\n    sprite.create(opts, function () {\n      console.log('> Sprite created in ' + opts.out);\n    });\n  });\n}\nelse {\n  if (opts['no-sort']) {\n    opts.sort = false;\n  }\n\n  sprite.create(opts);\n}\n","/home/travis/build/npmtest/node-npmtest-css-sprite/node_modules/css-sprite/tasks/css_sprite.js":"/*\n * grunt-css-sprite\n * https://github.com/aslansky/grunt-css-sprite\n *\n * Copyright (c) 2014 Alexander Slansky\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nvar sprite = require('../index');\nvar path = require('path');\n\nmodule.exports = function(grunt) {\n\n  grunt.registerMultiTask('css_sprite', 'Grunt task for generating css sprites images and corresponding stylesheets.', function () {\n    // Merge task-specific and/or target-specific options with these defaults.\n    var options = this.options({\n      out: '',\n      name: 'sprite',\n      style: null,\n      cssPath: '../images',\n      format: 'png',\n      processor: 'css',\n      orientation: 'vertical',\n      retina: false,\n      margin: 5,\n      prefix: 'icon',\n      background: '#FFFFFF',\n      sort: true,\n      opacity: 0,\n      interpolation: 'grid'\n    });\n\n    var done = this.async();\n    this.files.forEach(function(f) {\n      options.src = f.orig.src;\n      options.name = path.basename(f.dest);\n      options.out = path.dirname(f.dest);\n      sprite.create(options, function () {\n        grunt.log.writeln('File ' + f.dest + ' created.');\n        done();\n      });\n    });\n\n  });\n\n};\n","/home/travis/build/npmtest/node-npmtest-css-sprite/node_modules/css-sprite/lib/templates/sprite.js":"'use strict';\n\n// Load in local modules\nvar fs = require('graceful-fs');\nvar path = require('path');\nvar mustache = require('mustache');\nvar cssesc = require('cssesc');\nvar tmpl = {\n  'css': fs.readFileSync(__dirname + '/css.mustache', 'utf8'),\n  'scss': fs.readFileSync(__dirname + '/scss.mustache', 'utf8'),\n  'sass': fs.readFileSync(__dirname + '/sass.mustache', 'utf8'),\n  'less': fs.readFileSync(__dirname + '/less.mustache', 'utf8'),\n  'stylus': fs.readFileSync(__dirname + '/stylus.mustache', 'utf8')\n};\n\n// Define our css template fn ({items, options}) -> css\nfunction cssTemplate (params) {\n  // Localize parameters\n  var items = params.items;\n  var options = params.options;\n  var tmplParams = {\n    sprite: null,\n    retina: null,\n    items: [],\n    options: options\n  };\n\n  var classFn = function (name, sep) {\n    if (options.cssClass) {\n      return '.' + cssesc(options.cssClass + sep + name, {isIdentifier: true});\n    }\n    else {\n      return '.icon' + cssesc(sep + name, {isIdentifier: true});\n    }\n  };\n\n  // Add class to each of the options\n  items.forEach(function saveClass (item) {\n    if (item.type === 'sprite') {\n      item['class'] = classFn('', '');\n      tmplParams.sprite = item;\n    }\n    else if (item.type === 'retina') {\n      item['class'] = classFn('', '');\n      tmplParams.retina = item;\n    }\n    else {\n      item['class'] = classFn(item.name, '-');\n      tmplParams.items.push(item);\n    }\n  });\n  // Render and return CSS\n  var tmplFile = options.template ?\n    fs.readFileSync(path.resolve(process.cwd(), options.template), 'utf8') :\n    tmpl[options.processor];\n  var css = mustache.render(tmplFile, tmplParams);\n  return css;\n}\n\n// Export our CSS template\nmodule.exports = cssTemplate;\n"}